beta2[i] <- lm_model$coefficients[3]
}
n <-  100
sigma <- 1
N <-  1000
beta1 <- c()
beta2 <- c()
for (i in 1:N){
x1 <- rnorm(n)
x2 <- x1 + rnorm(n,0,sigma^2)
y <- x1+x2+rnorm(n)
lm_model <- lm(y~x1+x2)
beta1[i] <- lm_model$coefficients[2]
beta2[i] <- lm_model$coefficients[3]
}
tbl <- tibble(beta1 = beta1, beta2 = beta2)
tbl%>%
summarise("mean beta1" = mean(beta1),
"mean beta2" = mean(beta2),
"std beta1" = std(beta1),
"std beta2" = std(beta2),
"cor beta1,beta2" = cor(beta1,beta2))
n <-  100
sigma <- 1
N <-  1000
beta1 <- c()
beta2 <- c()
for (i in 1:N){
x1 <- rnorm(n)
x2 <- x1 + rnorm(n,0,sigma^2)
y <- x1+x2+rnorm(n)
lm_model <- lm(y~x1+x2)
beta1[i] <- lm_model$coefficients[2]
beta2[i] <- lm_model$coefficients[3]
}
tbl <- tibble(beta1 = beta1, beta2 = beta2)
tbl%>%
summarise("mean beta1" = mean(beta1),
"mean beta2" = mean(beta2),
"sd beta1" = sd(beta1),
"sd beta2" = sd(beta2),
"cor beta1,beta2" = cor(beta1,beta2))
tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_line()
tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_abline()
tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_line(Y~x)
tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_line(y~x)
tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_line(aes(y~x))
tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_smooth(method='lm', formula= y~x)
tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_smooth(method='lm', formula= y~x,sd=F)
?geom_smooth
tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_smooth(method='lm', formula= y~x,se=F)
n <-  100
sigma <- 1
N <-  1000
simulation <- function(n,sigma){
beta1 <- c()
beta2 <- c()
for (i in 1:N){
x1 <- rnorm(n)
x2 <- x1 + rnorm(n,0,sigma^2)
y <- x1+x2+rnorm(n)
lm_model <- lm(y~x1+x2)
beta1[i] <- lm_model$coefficients[2]
beta2[i] <- lm_model$coefficients[3]
}
tbl <- tibble(beta1 = beta1, beta2 = beta2)
summary_tbl <- tbl%>%
summarise("mean beta1" = mean(beta1),
"mean beta2" = mean(beta2),
"sd beta1" = sd(beta1),
"sd beta2" = sd(beta2),
"cor beta1,beta2" = cor(beta1,beta2))
plt <- tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_smooth(method='lm', formula= y~x,se=F)
return(summary_tbl,plt)
}
simulation(n,sigma)
simulation <- function(n,sigma){
beta1 <- c()
beta2 <- c()
for (i in 1:N){
x1 <- rnorm(n)
x2 <- x1 + rnorm(n,0,sigma^2)
y <- x1+x2+rnorm(n)
lm_model <- lm(y~x1+x2)
beta1[i] <- lm_model$coefficients[2]
beta2[i] <- lm_model$coefficients[3]
}
tbl <- tibble(beta1 = beta1, beta2 = beta2)
summary_tbl <- tbl%>%
summarise("mean beta1" = mean(beta1),
"mean beta2" = mean(beta2),
"sd beta1" = sd(beta1),
"sd beta2" = sd(beta2),
"cor beta1,beta2" = cor(beta1,beta2))
plt <- tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_smooth(method='lm', formula= y~x,se=F)
return(list(summary_tbl,plt))
}
simulation(n,sigma)
bind_rows(s1[[1]],s2[[1]])
s1 <- simulation(100,1)
s1 <- simulation(100,1)
s2 <- simulation(100,3)
s3 <- simulation(1000,1)
s3 <- simulation(1000,1)
s4 <- simulation(1000,3)
s1[[1]]
s2[[1]]
bind_rows(s1[[1]],s2[[1]])
bind_rows(s1[[1]],s2[[1]],s3[[1]],s4[[1]])
bind_rows(s1[[1]],s2[[1]],s3[[1]],s4[[1]]) %>%
mutate(n = c(100,100,1000,1000), sd = (1,3,1,3))
bind_rows(s1[[1]],s2[[1]],s3[[1]],s4[[1]]) %>%
mutate(n = c(100,100,1000,1000), sd = c(1,3,1,3))
s1[[1]]
s2[[1]]
s1[[1]]
simulation <- function(n,sigma){
beta1 <- c()
beta2 <- c()
for (i in 1:N){
x1 <- rnorm(n)
x2 <- x1 + rnorm(n,0,sigma^2)
y <- x1+x2+rnorm(n)
lm_model <- lm(y~x1+x2)
beta1[i] <- lm_model$coefficients[2]
beta2[i] <- lm_model$coefficients[3]
}
tbl <- tibble(beta1 = beta1, beta2 = beta2)
summary_tbl <- tbl%>%
summarise("mean beta1" = mean(beta1),
"mean beta2" = mean(beta2),
"sd beta1" = sd(beta1),
"sd beta2" = sd(beta2),
"cor beta1,beta2" = cor(beta1,beta2))
plt <- tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_smooth(method='lm', formula= y~x,se=F)+
ggtitle(glue("n = {n}, sd = {sd}"))
return(list(summary_tbl,plt))
}
s1 <- simulation(100,1)
s1[[2]]
simulation <- function(n,sigma){
beta1 <- c()
beta2 <- c()
for (i in 1:N){
x1 <- rnorm(n)
x2 <- x1 + rnorm(n,0,sigma^2)
y <- x1+x2+rnorm(n)
lm_model <- lm(y~x1+x2)
beta1[i] <- lm_model$coefficients[2]
beta2[i] <- lm_model$coefficients[3]
}
tbl <- tibble(beta1 = beta1, beta2 = beta2)
summary_tbl <- tbl%>%
summarise("mean beta1" = mean(beta1),
"mean beta2" = mean(beta2),
"sd beta1" = sd(beta1),
"sd beta2" = sd(beta2),
"cor beta1,beta2" = cor(beta1,beta2))
plt <- tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_smooth(method='lm', formula= y~x,se=F)+
ggtitle(glue("n = {n}, sd = {sd}"))
return(list(summary_tbl,plt))
}
s1 <- simulation(100,1)
simulation <- function(n,sigma){
beta1 <- c()
beta2 <- c()
for (i in 1:N){
x1 <- rnorm(n)
x2 <- x1 + rnorm(n,0,sigma^2)
y <- x1+x2+rnorm(n)
lm_model <- lm(y~x1+x2)
beta1[i] <- lm_model$coefficients[2]
beta2[i] <- lm_model$coefficients[3]
}
tbl <- tibble(beta1 = beta1, beta2 = beta2)
summary_tbl <- tbl%>%
summarise("mean beta1" = mean(beta1),
"mean beta2" = mean(beta2),
"sd beta1" = sd(beta1),
"sd beta2" = sd(beta2),
"cor beta1,beta2" = cor(beta1,beta2))
plt <- tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_smooth(method='lm', formula= y~x,se=F)+
ggtitle(glue("n = {n}, sigma = {sigma}"))
return(list(summary_tbl,plt))
}
s1 <- simulation(100,1)
s1[[2]]
(s1[[2]] + s2[[2]])|
(s3[[2]] + s4[[2]])
N <-  1000
simulation <- function(n,sigma){
beta1 <- c()
beta2 <- c()
for (i in 1:N){
x1 <- rnorm(n)
x2 <- x1 + rnorm(n,0,sigma^2)
y <- x1+x2+rnorm(n)
lm_model <- lm(y~x1+x2)
beta1[i] <- lm_model$coefficients[2]
beta2[i] <- lm_model$coefficients[3]
}
tbl <- tibble(beta1 = beta1, beta2 = beta2)
summary_tbl <- tbl%>%
summarise("mean beta1" = mean(beta1),
"mean beta2" = mean(beta2),
"sd beta1" = sd(beta1),
"sd beta2" = sd(beta2),
"cor beta1,beta2" = cor(beta1,beta2))
plt <- tbl %>%
ggplot(aes(y=beta2,x=beta1)) +
geom_point()+
geom_smooth(method='lm', formula= y~x,se=F)+
ggtitle(glue("n = {n}, sigma = {sigma}"))
return(list(summary_tbl,plt))
}
s1 <- simulation(100,1)
s2 <- simulation(100,3)
s3 <- simulation(1000,1)
s4 <- simulation(1000,3)
bind_rows(s1[[1]],s2[[1]],s3[[1]],s4[[1]]) %>%
mutate(n = c(100,100,1000,1000), sd = c(1,3,1,3))
(s1[[2]] + s2[[2]])|
(s3[[2]] + s4[[2]])
s2[[2]]
s1[[2]] + s2[[2]]
s1[[2]]
s2[[2]]
s3[[2]] + s4[[2]]
library(patchwork)
(s1[[2]] + s2[[2]])|
(s3[[2]] + s4[[2]])
(s1[[2]] + s2[[2]])\
(s1[[2]] + s2[[2]])
(s3[[2]] + s4[[2]])
bind_rows(s1[[1]],s2[[1]],s3[[1]],s4[[1]]) %>%
mutate(n = c(100,100,1000,1000), sd = c(1,3,1,3))
(s3[[2]] + s4[[2]])
(s1[[2]] + s2[[2]])
(s3[[2]] + s4[[2]])
(s1[[2]] + s2[[2]])
(s3[[2]] + s4[[2]])
(s1[[2]] + s2[[2]])
(s3[[2]] + s4[[2]])
(s1[[2]] + s2[[2]])
(s3[[2]] + s4[[2]])
bind_rows(s1[[1]],s2[[1]],s3[[1]],s4[[1]]) %>%
mutate(n = c(100,100,1000,1000), sd = c(1,3,1,3))
feed_back <- read.csv("feedback_df_bi.csv")
feed_back
feed_back <- read.csv("feedback_df_bi.csv") %>%
select(id,performance,feedback,gender) %>%
mutate(across(c(gender,feedback),as.factor))
feed_back
library(lme4)
model1 <- lmer(performance ~ gender + (1|id) , data = feed_back_cont)
model1 <- lmer(performance ~ gender + (1|id) , data = feed_back)
model1
feed_back <- read.csv("feedback_df_bi.csv") %>%
select(id,performance,feedback,gender) %>%
mutate(across(c(gender,feedback),as.factor))
model1 <- lmer(performance ~ gender + (1|id) , data = feed_back)
summary(model1)
library(lmerTest)
install.packages("lmerTest")
library(lmerTest)
feed_back <- read.csv("feedback_df_bi.csv") %>%
select(id,performance,feedback,gender) %>%
mutate(across(c(gender,feedback),as.factor))
model1 <- lmer(performance ~ gender + (1|id) , data = feed_back)
summary(model1)
View(summary(model1))
View(model1)
summary(model1)
confint(feed_back)
feed_back <- read.csv("feedback_df_bi.csv") %>%
select(id,performance,feedback,gender) %>%
mutate(across(c(gender,feedback),as.factor))
model1 <- lmer(performance ~ gender + (1|id) , data = feed_back)
summary(model1)
mu <- 92.121
sigma_a <- 84.59
sigma_e <- 131.28
glue("the estimators are:
mu = {mu}
sigma alpha = {sigma_a}
sigma epsilon = {sigma_e}")
confint(feed_back)
confint(lme4lmer(performance ~ gender + (1|id) , data = feed_back))
confint(lme4::lmer(performance ~ gender + (1|id) , data = feed_back))
model2 <- lmerTest::lmer(performance ~ feedback + (1|id) , data = feed_back)
summary(model2)
mu <- 92.121
sigma_a <- 84.59
sigma_e <- 131.28
glue("the estimators are:
mu = {mu}
sigma alpha = {sigma_a}
sigma epsilon = {sigma_e}")
confint(lme4::lmer(performance ~ feedback + (1|id) , data = feed_back))
model3 <- lmerTest::lmer(performance ~ feedback+ gender + (1|id) , data = feed_back)
summary(model3)
mu <- 95.7
sigma_a <- 80.92
sigma_e <- 122.87
glue("the estimators are:
mu = {mu}
sigma alpha = {sigma_a}
sigma epsilon = {sigma_e}")
confint(lme4::lmer(performance ~ feedback+ gender + (1|id) , data = feed_back))
model4 <- lmerTest::lmer(performance ~ feedback+ gender+ gender*feedback + (1|id) , data = feed_back)
summary(model4)
mu <- 96.24
sigma_a <- 84.82
sigma_e <- 122.87
glue("the estimators are:
mu = {mu}
sigma alpha = {sigma_a}
sigma epsilon = {sigma_e}")
confint(lme4::lmer(performance ~ feedback+ gender + gender*feedback+ (1|id) , data = feed_back))
feed_back <- read.csv("feedback_df_bi.csv") %>%
select(id,performance,feedback,gender) %>%
mutate(across(c(gender,feedback),as.factor))
model1 <- lmerTest::lmer(performance ~ gender + (1|id) , data = feed_back)
summary(model1)
mu <- 92.121
sigma_a <- 84.59
sigma_e <- 131.28
glue("the estimators are:
mu = {mu}
sigma alpha = {sigma_a}
sigma epsilon = {sigma_e}")
confint(lme4::lmer(performance ~ gender + (1|id) , data = feed_back))
library(tidyverse)
library(glue)
library(patchwork)
library(tidymodels)
library(glmnet)
library(pls)
tbl <- as_tibble(read.table("Pois.dat",header = T))%>%
mutate(across(c(Type,Treat),as.factor))
tbl %>%
group_by(Type,Treat) %>%
summarise(varinace_Time = var(Time)) %>%
arrange(-varinace_Time)
# chosing relevant transformation
g1 <- tbl %>%
ggplot()+
geom_density(aes(x = log(Time)))+
ggtitle("density of ln(Time)")
g2 <- tbl %>%
ggplot()+
geom_qq(aes(sample = log(Time)))+
geom_qq_line(aes(sample = log(Time)))+
ggtitle("qqplot for ln(Time)")
g1 + g2
#model
logtbl <- tbl %>%
mutate(across(Time,log)) %>%
rename(log_Time = Time)
model <- lm(log_Time~ Type+Treat+Type*Treat,data = logtbl)
#in group var
logtbl %>%
group_by(Type,Treat) %>%
summarise(varinace_Time = var(log_Time)) %>%
arrange(-varinace_Time)
anova(model)
res_model <-  lm(log_Time~ Type+Treat,data = logtbl)
anova(res_model,model)
pred_tibl <- tibble(Type = 2, Treat = 1)%>% mutate(across(c(Type,Treat),factor))
pred_ci <- exp(predict.lm(res_model,pred_tibl,interval = "prediction"))
med_ci <- exp(predict.lm(res_model,pred_tibl,interval = "confidence"))
glue("the estimated survival time is: {round(pred_ci[1],3)}\n",
"the prediction interval is: ({round(pred_ci[2],3)},{round(pred_ci[3],3)})\n",
"the interval for median survival time is: ({round(med_ci[2],3)},{round(med_ci[3],3)})")
Prostate <- as_tibble(read.table("Prostate.dat",header = T)) %>% mutate(across(svi,factor))
g3 <- Prostate %>%
ggplot()+
geom_density(aes(x = lpsa))+
ggtitle("density of lpsa")
g4 <- Prostate %>%
ggplot()+
geom_qq(aes(sample = lpsa))+
geom_qq_line(aes(sample = lpsa))+
ggtitle("qqplot for lpsa")
g3 + g4
Prostate %>%
gather(-lpsa,-svi,key = "var", value = "value") %>%
ggplot(aes(x = value, y = lpsa, color = svi)) +
geom_point() +
facet_wrap(~ var, scales = "free") +
theme_bw()
Prostate %>%
select(-lpsa)%>%
mutate(across(svi,as.numeric))%>%
cor()
set.seed(5)
split_obj <- Prostate%>%
initial_split(prop = 74.5/97)
Prostate_tr <- training(split_obj)
Prostate_te <- testing(split_obj)
model_main <- lm(lpsa~.,data = Prostate_tr)
summary(model)
model_with_inter<- lm(lpsa~.+svi*lcavol+svi*lweight+svi * age + svi*lbph + svi*lcp+svi*gleason+svi*pgg45,data = Prostate_tr)
AIC <- stats::step(model_with_inter,direction  = "both",trace = 0)
BIC <- stats::step(model_with_inter,direction  = "both",trace = 0, k = log(75))
RIC <- stats::step(model_with_inter,direction  = "both",trace = 0, k = 2*log(15))
summary(AIC)
summary(BIC)
summary(RIC)
anova(BIC,AIC)
lambda_cv <- cv.glmnet(model.matrix(model_with_inter),Prostate_tr$lpsa,alpha=1)$lambda.min
lasso_model <- glmnet(model.matrix(model_with_inter),Prostate_tr$lpsa,alpha=1,lambda = lambda_cv)
print(round(predict(lasso_model,s=lambda_cv,type="coefficients"),5))
#pcr
pcr_model <- pcr(lpsa~.,data = Prostate_tr,scale=T,validation="CV")
summary(pcr_model)
validationplot(pcr_model, val.type = "R2")
#pls
pls_model <- plsr(lpsa~.,data = Prostate_tr,scale=T,validation="CV")
summary(pls_model)
validationplot(pls_model, val.type = "R2")
models <- list(model_main,
model_with_inter,
AIC,
BIC,
RIC,
lasso_model,
pls_model,
pcr_model)
model_names <- c("model_main",
"model_with_inter",
"AIC",
"BIC",
"RIC",
"lasso_model",
"pls_model",
"pcr_model")
mse = c()
for (i in 1:length(models)){
if (i <= 5){y_pred <- predict(models[[i]],Prostate_te)}
if (i==6) {y_pred <- predict(models[[i]],model.matrix(lpsa~.+svi*lcavol+svi*lweight+svi * age + svi*lbph + svi*lcp+svi*gleason+svi*pgg45,Prostate_te))}
if (i >6){y_pred <- predict(models[[i]],Prostate_te,ncomp = 3)}
mse[i] <- mean((y_pred - Prostate_te$lpsa)^2)
}
tibble(model = model_names,"mse" = mse) %>% arrange(mse)
set.seed(100)
split_obj <- Prostate%>%
initial_split(prop = 74.5/97)
Prostate_tr <- training(split_obj)
Prostate_te <- testing(split_obj)
model_main <- lm(lpsa~.,data = Prostate_tr)
model_with_inter<- lm(lpsa~.+svi*lcavol+svi*lweight+svi * age + svi*lbph + svi*lcp+svi*gleason+svi*pgg45,data = Prostate_tr)
AIC <- stats::step(model_with_inter,direction  = "both",trace = 0)
BIC <- stats::step(model_with_inter,direction  = "both",trace = 0, k = log(75))
RIC <- stats::step(model_with_inter,direction  = "both",trace = 0, k = 2*log(15))
lambda_cv <- cv.glmnet(model.matrix(model_with_inter),Prostate_tr$lpsa,alpha=1)$lambda.min
lasso_model <- glmnet(model.matrix(model_with_inter),Prostate_tr$lpsa,alpha=1,lambda = lambda_cv)
#pcr
pcr_model <- pcr(lpsa~.,data = Prostate_tr,scale=T,validation="CV")
summary(pcr_model)
validationplot(pcr_model, val.type = "R2")
#pls
pls_model <- plsr(lpsa~.,data = Prostate_tr,scale=T,validation="CV")
summary(pls_model)
validationplot(pls_model, val.type = "R2")
mse_2 = c()
for (i in 1:length(models)){
if (i <= 5){y_pred <- predict(models[[i]],Prostate_te)}
if (i==6) {y_pred <- predict(models[[i]],model.matrix(lpsa~.+svi*lcavol+svi*lweight+svi * age + svi*lbph + svi*lcp+svi*gleason+svi*pgg45,Prostate_te))}
if (i >6){y_pred <- predict(models[[i]],Prostate_te,ncomp = 3)}
mse_2[i] <- mean((y_pred - Prostate_te$lpsa)^2)
}
tibble(model = model_names,"mse 1st split" = mse,"mse 2nd split" = mse_2) %>% arrange(mse)
