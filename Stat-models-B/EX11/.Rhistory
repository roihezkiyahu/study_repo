knitr::opts_chunk$set(echo = TRUE)
#imports
library(tidyverse)
library(tidymodels)
library(glmnet)
library(glue)
library(microbenchmark)
library(caret)
library(ROCit)
bank <- read_csv("bank.csv") %>% mutate(y = ifelse(y == "yes",1,0)) %>% select(-1,-2)
X <- model.matrix(y~ 0+.,data = bank)
y <- bank$y
lasso <- glmnet(X,y,family = "binomial",alpha = 1)
lasso
plot(lasso, label = T)
model_1 <- glmnet(X,y,family = "binomial",alpha = 1,lambda = 0.1)
model_2 <- glmnet(X,y,family = "binomial",alpha = 1,lambda = 0.025)
model_3 <- glmnet(X,y,family = "binomial",alpha = 1,lambda = 0.001)
glue("model 1 coef")
coef(model_1)
glue("model 2 coef")
coef(model_2)
glue("model 3 coef")
coef(model_3)
cv_lambda <- cv.glmnet(X,y,family = "binomial",alpha = 1)
glue("best lambda value is: {cv_lambda$lambda.min}")
min_lambd <- cv_lambda$lambda[which.min(cv_lambda$cvm)]
glue("best lambda value is: {min_lambd}")
cv_lambda
glue("from the table we can see that all variables are non zero")
plot(cv_lambda)
glue("biggest lambda with 1 std away is approx: {exp(-4.6)}")
ci <- min(cv_lambda$cvm) + c(-1,1)* cv_lambda$cvsd[60]
# all values are begger then the lower bound
lambdas <- cv_lambda$lambda[cv_lambda$cvm < ci[2]]
biggest_lambda <- max(lambdas)
biggest_lambda
non_zero <- tidy(cv_lambda) %>% filter(near(lambda,0.01039345)) %>% pull (nzero)
glue ("the number f non zero paramaters is: {non_zero}")
coef(glmnet(X,y,family = "binomial",alpha = 1,lambda = 0.01039345))
coef(glmnet(X,y,family = "binomial",alpha = 1,lambda = exp(-6)))
coef(glmnet(X,y,family = "binomial",alpha = 1,lambda = exp(-7.3)))
train_inds <- sample(1:nrow(X),floor(0.7*nrow(X)))
train <- bank %>% slice(train_inds)
test <- bank %>% slice(-train_inds)
logistic_model <- glm(y~.,data = train,family = "binomial")
test$y_pred <- predict(logistic_model,test,type = "response")
test
test_with_thetas <- test %>% mutate(theta05 = as.numeric(y_pred>0.05)) %>%
mutate(theta1 = as.numeric(y_pred>0.1)) %>%
mutate(theta2 = as.numeric(y_pred>0.2))
test_with_thetas %>% summarise(across(c(theta05,theta1,theta2),mean))
tbl_theta <- function(theta){
cm <- confusionMatrix(data = factor(as.numeric(test$y_pred>theta),levels = c(0,1)),reference  = factor(test$y))$table
glue("for theta = {theta}
fn = {cm[2,1]}
tn = {cm[1,1]}
fp = {cm[1,2]}
tp = {cm[2,2]}
")
}
tbl_theta(0.05)
tbl_theta(0.1)
tbl_theta(0.2)
tbl_theta(0)
tbl_theta(0.5)
tbl_theta(1)
acc_vales <- function(theta){
cm <- confusionMatrix(data = factor(as.numeric(test$y_pred>theta),levels = c(0,1)),reference  = factor(test$y))
acc = cm$overall["Accuracy"]
sensi = cm$byClass["Sensitivity"]
speci = cm$byClass["Specificity"]
glue("for theta = {theta}
Accuracy = {acc}
Sensitivity = {sensi}
Specificity = {speci}
")
}
map(c(0,0.05,0.1,0.2,0.5,1),acc_vales)
## Warning: package 'ROCit' was built under R version 3.5.2
ROCit_obj <- rocit(score=test$y_pred,class=factor(test$y))
plot(ROCit_obj)
bank_full <- read_csv("bank_full.csv") %>% mutate(y = ifelse(y == "yes",1,0)) %>% select(-1,-2)
totsec <- mean(microbenchmark(glm(y~.,data = bank_full[c(sample(colnames(bank_full)[-14],7),"y")],family = "binomial"), times = 100, unit = "s")$time/10^9)
glue("the estimated amout of time is: {totsec*16384/60} mintues ")
totmin <- mean(microbenchmark(glm(y~.^2,data = bank_full[c(sample(colnames(bank_full)[-14],7),"y")],family = "binomial"), times = 10, unit = "s")$time/10^9)
glue("the estimated amout of time is: {totmin*4.05*10^31/60/60/24/365} years")
X <- model.matrix(y~ .^2,data = bank_full)
y <- bank_full$y
ppp
X
ncols(X)
colnames(X)
?cv.glmnet
require(doMC)
install.packages("doMC")
require(doMC)
X <- model.matrix(y~ .^2,data = bank_full)
y <- bank_full$y
las_cv <- cv.glmnet(X,y,family = "binomial",alpha = 1,nfolds = 5)
lasso_model <- glmnet(X,y,family = "binomial",alpha = 1,lambda = las_cv$lambda.min)
y
cv_lambda
cv_lambda$lambda
?seq
las_cv <- cv.glmnet(X,y,family = "binomial",alpha = 1,nfolds = 5,lambda = seq(0.001,0.2,length.out=50))
las_cv
lasso_model <- glmnet(X,y,family = "binomial",alpha = 1,lambda = las_cv$lambda.min)
knitr::opts_chunk$set(echo = TRUE)
#imports
library(tidyverse)
library(tidymodels)
library(glmnet)
library(glue)
library(microbenchmark)
library(caret)
library(ROCit)
bank <- read_csv("bank.csv") %>% mutate(y = ifelse(y == "yes",1,0)) %>% select(-1,-2)
X <- model.matrix(y~ 0+.,data = bank)
y <- bank$y
lasso <- glmnet(X,y,family = "binomial",alpha = 1)
lasso
plot(lasso, label = T)
model_1 <- glmnet(X,y,family = "binomial",alpha = 1,lambda = 0.1)
model_2 <- glmnet(X,y,family = "binomial",alpha = 1,lambda = 0.025)
model_3 <- glmnet(X,y,family = "binomial",alpha = 1,lambda = 0.001)
glue("model 1 coef")
coef(model_1)
glue("model 2 coef")
coef(model_2)
glue("model 3 coef")
coef(model_3)
cv_lambda <- cv.glmnet(X,y,family = "binomial",alpha = 1)
glue("best lambda value is: {cv_lambda$lambda.min}")
min_lambd <- cv_lambda$lambda[which.min(cv_lambda$cvm)]
glue("best lambda value is: {min_lambd}")
cv_lambda
glue("from the table we can see that all variables are non zero")
plot(cv_lambda)
glue("biggest lambda with 1 std away is approx: {exp(-4.6)}")
ci <- min(cv_lambda$cvm) + c(-1,1)* cv_lambda$cvsd[60]
# all values are begger then the lower bound
lambdas <- cv_lambda$lambda[cv_lambda$cvm < ci[2]]
biggest_lambda <- max(lambdas)
biggest_lambda
non_zero <- tidy(cv_lambda) %>% filter(near(lambda,0.01039345)) %>% pull (nzero)
glue ("the number f non zero paramaters is: {non_zero}")
coef(glmnet(X,y,family = "binomial",alpha = 1,lambda = 0.01039345))
coef(glmnet(X,y,family = "binomial",alpha = 1,lambda = exp(-6)))
coef(glmnet(X,y,family = "binomial",alpha = 1,lambda = exp(-7.3)))
train_inds <- sample(1:nrow(X),floor(0.7*nrow(X)))
train <- bank %>% slice(train_inds)
test <- bank %>% slice(-train_inds)
logistic_model <- glm(y~.,data = train,family = "binomial")
test$y_pred <- predict(logistic_model,test,type = "response")
test
test_with_thetas <- test %>% mutate(theta05 = as.numeric(y_pred>0.05)) %>%
mutate(theta1 = as.numeric(y_pred>0.1)) %>%
mutate(theta2 = as.numeric(y_pred>0.2))
test_with_thetas %>% summarise(across(c(theta05,theta1,theta2),mean))
tbl_theta <- function(theta){
cm <- confusionMatrix(data = factor(as.numeric(test$y_pred>theta),levels = c(0,1)),reference  = factor(test$y))$table
glue("for theta = {theta}
fn = {cm[2,1]}
tn = {cm[1,1]}
fp = {cm[1,2]}
tp = {cm[2,2]}
")
}
tbl_theta(0.05)
tbl_theta(0.1)
tbl_theta(0.2)
tbl_theta(0)
tbl_theta(0.5)
tbl_theta(1)
acc_vales <- function(theta){
cm <- confusionMatrix(data = factor(as.numeric(test$y_pred>theta),levels = c(0,1)),reference  = factor(test$y))
acc = cm$overall["Accuracy"]
sensi = cm$byClass["Sensitivity"]
speci = cm$byClass["Specificity"]
glue("for theta = {theta}
Accuracy = {acc}
Sensitivity = {sensi}
Specificity = {speci}
")
}
map(c(0,0.05,0.1,0.2,0.5,1),acc_vales)
## Warning: package 'ROCit' was built under R version 3.5.2
ROCit_obj <- rocit(score=test$y_pred,class=factor(test$y))
plot(ROCit_obj)
bank_full <- read_csv("bank_full.csv") %>% mutate(y = ifelse(y == "yes",1,0)) %>% select(-1,-2)
totsec <- mean(microbenchmark(glm(y~.,data = bank_full[c(sample(colnames(bank_full)[-14],7),"y")],family = "binomial"), times = 100, unit = "s")$time/10^9)
glue("the estimated amout of time is: {totsec*16384/60} mintues ")
totmin <- mean(microbenchmark(glm(y~.^2,data = bank_full[c(sample(colnames(bank_full)[-14],7),"y")],family = "binomial"), times = 10, unit = "s")$time/10^9)
glue("the estimated amout of time is: {totmin*4.05*10^31/60/60/24/365} years")
X <- model.matrix(y~ .^2,data = bank_full)
y <- bank_full$y
las_cv <- cv.glmnet(X,y,family = "binomial",alpha = 1,nfolds = 5,lambda = seq(0.005,0.15,length.out=50))
las_cv
plot(las_cv)
ci <- min(cv_lambda$cvm) + c(-1,1)* cv_lambda$cvsd[which.min(cv_lambda$cvm)]
lasso_model <- glmnet(X,y,family = "binomial",alpha = 1,lambda = las_cv$lambda.min)
coef(lasso_model)
ncols(X) - tidy(cv_lambda) %>% filter(near(lambda,las_cv$lambda.min)) %>% pull (nzero)
